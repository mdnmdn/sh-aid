name: CI - Test and publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: sh-aid

jobs:
  test:
    name: Test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.89.0
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build-macos:
    name: Build macOS Binaries
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.89.0
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare binary for upload
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} release/${{ env.BINARY_NAME }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: release/${{ env.BINARY_NAME }}
          if-no-files-found: error

  # build-linux:
  #   name: Build Linux Binaries (commented for now)
  #   needs: test
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
  #   steps:
  #     - uses: actions/checkout@v3
  #
  #     - name: Install Rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: 1.89.0
  #         target: ${{ matrix.target }}
  #         override: true
  #
  #     - name: Build release binary
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: build
  #         args: --release --target ${{ matrix.target }}
  #
  #     - name: Prepare binary for upload
  #       run: |
  #         mkdir -p release
  #         cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} release/${{ env.BINARY_NAME }}
  #
  #     - name: Upload binary artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
  #         path: release/${{ env.BINARY_NAME }}
  #         if-no-files-found: error

  # build-windows:
  #   name: Build Windows Binaries (commented for now)
  #   needs: test
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       target: [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]
  #   steps:
  #     - uses: actions/checkout@v3
  #
  #     - name: Install Rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: 1.89.0
  #         target: ${{ matrix.target }}
  #         override: true
  #
  #     - name: Build release binary
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: build
  #         args: --release --target ${{ matrix.target }}
  #
  #     - name: Prepare binary for upload
  #       shell: bash
  #       run: |
  #         mkdir -p release
  #         cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe release/${{ env.BINARY_NAME }}.exe
  #
  #     - name: Upload binary artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
  #         path: release/${{ env.BINARY_NAME }}.exe
  #         if-no-files-found: error

  publish-create:
    name: Publish to crates.io
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.89.0
          override: true

      - name: Skip publish (disabled in this phase)
        run: echo "cargo publish is intentionally disabled/commented out in this phase."

      # NOTE: Publishing to cargo is intentionally commented out in this phase as requested.
      # - name: Publish to crates.io
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: publish
      #     args: --token ${{ secrets.CRATES_IO_TOKEN }} --locked

  create-release:
    name: Create GitHub Release
    needs: [build-macos] # To include Linux/Windows later: [build-macos, build-linux, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Prepare release assets
        shell: bash
        run: |
          cd release
          # Create zip files for each binary directory
          for dir in */; do
            dir=${dir%/}
            if [ -f "$dir/${BINARY_NAME}" ]; then
              chmod +x "$dir/${BINARY_NAME}"
              zip -j "$dir.zip" "$dir/${BINARY_NAME}"
            elif [ -f "$dir/${BINARY_NAME}.exe" ]; then
              zip -j "$dir.zip" "$dir/${BINARY_NAME}.exe"
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            release/*.zip
          body: |
            ## sh-aid v${{ steps.get_version.outputs.VERSION }}

            ### Installation

            #### Manual Installation
            Download the appropriate binary for your system:
            - Intel Mac: sh-aid-x86_64-apple-darwin.zip
            - Apple Silicon Mac: sh-aid-aarch64-apple-darwin.zip
            # - Linux x86_64: sh-aid-x86_64-unknown-linux-gnu.zip
            # - Linux aarch64: sh-aid-aarch64-unknown-linux-gnu.zip
            # - Windows x86_64: sh-aid-x86_64-pc-windows-msvc.zip
            # - Windows aarch64: sh-aid-aarch64-pc-windows-msvc.zip

            Extract and place the binary in your PATH.

            #### Cargo (disabled for now)
            # cargo install sh-aid

            See CHANGELOG.md for details on changes in this release.

  # The following job updates a Homebrew tap. It's specific to the asimeow project.
  # If you want a Homebrew tap for sh-aid, uncomment and adapt this job to your tap repo.
  # update-homebrew:
  #   runs-on: ubuntu-latest
  #   needs: [create-release]
  #   steps:
  #     - name: Extract Version
  #       id: version
  #       run: |
  #         if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
  #           echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
  #           echo "Using manually provided version: ${{ github.event.inputs.version }}"
  #         else
  #           VERSION=${GITHUB_REF#refs/tags/v}
  #           echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
  #           echo "Using version from tag: $VERSION"
  #         fi
  #
  #     - name: Check if assets exist
  #       id: check_assets
  #       run: |
  #         VERSION=${{ steps.version.outputs.VERSION }}
  #         HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://github.com/${{ github.repository }}/releases/download/v$VERSION/${{ env.BINARY_NAME }}-x86_64-apple-darwin.zip)
  #         if [ "$HTTP_CODE" == "200" ] ||  [ "$HTTP_CODE" == "302" ] ||  [ "${{ github.event.inputs.force_update }}" == "true" ]; then
  #           echo "ASSETS_EXIST=true" >> $GITHUB_OUTPUT
  #           echo "Assets exist or force update enabled, proceeding with formula update"
  #         else
  #           echo "ASSETS_EXIST=false" >> $GITHUB_OUTPUT
  #           echo "Assets don't exist for version v$VERSION, aborting"
  #           exit 1
  #         fi
  #
  #     - name: Download release assets and compute SHA256
  #       id: sha256
  #       if: steps.check_assets.outputs.ASSETS_EXIST == 'true'
  #       run: |
  #         VERSION=${{ steps.version.outputs.VERSION }}
  #         mkdir -p tmp
  #         curl -L -o tmp/macos-arm64.zip https://github.com/${{ github.repository }}/releases/download/v$VERSION/${{ env.BINARY_NAME }}-aarch64-apple-darwin.zip
  #         MACOS_ARM64_SHA256=$(sha256sum tmp/macos-arm64.zip | cut -d ' ' -f 1)
  #         curl -L -o tmp/macos-x86.zip https://github.com/${{ github.repository }}/releases/download/v$VERSION/${{ env.BINARY_NAME }}-x86_64-apple-darwin.zip
  #         MACOS_X86_SHA256=$(sha256sum tmp/macos-x86.zip | cut -d ' ' -f 1)
  #         echo "MACOS_ARM64_SHA256=$MACOS_ARM64_SHA256" >> $GITHUB_OUTPUT
  #         echo "MACOS_X86_SHA256=$MACOS_X86_SHA256" >> $GITHUB_OUTPUT
  #
  #     - name: Checkout homebrew tap
  #       if: steps.check_assets.outputs.ASSETS_EXIST == 'true'
  #       uses: actions/checkout@v3
  #       with:
  #         repository: your-org/homebrew-sh-aid
  #         token: ${{ secrets.TAP_REPO_TOKEN }}
  #         path: homebrew-sh-aid
  #
  #     - name: Update formula
  #       if: steps.check_assets.outputs.ASSETS_EXIST == 'true'
  #       run: |
  #         VERSION=${{ steps.version.outputs.VERSION }}
  #         MACOS_ARM64_SHA256=${{ steps.sha256.outputs.MACOS_ARM64_SHA256 }}
  #         MACOS_X86_SHA256=${{ steps.sha256.outputs.MACOS_X86_SHA256 }}
  #         cd homebrew-sh-aid
  #         mkdir -p Formula
  #         cat > Formula/sh-aid.rb << EOF
  #         class ShAid < Formula
  #           desc "AI-powered shell command generator"
  #           homepage "https://github.com/${{ github.repository }}"
  #           version "$VERSION"
  #           license "MIT"
  #           on_macos do
  #             if Hardware::CPU.arm?
  #               url "https://github.com/${{ github.repository }}/releases/download/v$VERSION/${{ env.BINARY_NAME }}-aarch64-apple-darwin.zip"
  #               sha256 "$MACOS_ARM64_SHA256"
  #             else
  #               url "https://github.com/${{ github.repository }}/releases/download/v$VERSION/${{ env.BINARY_NAME }}-x86_64-apple-darwin.zip"
  #               sha256 "$MACOS_X86_SHA256"
  #             end
  #           end
  #           def install
  #             bin.install "${{ env.BINARY_NAME }}"
  #           end
  #           test do
  #             system "#{bin}/sh-aid", "--help"
  #           end
  #         end
  #         EOF
  #
  #     - name: Commit and push changes
  #       if: steps.check_assets.outputs.ASSETS_EXIST == 'true'
  #       run: |
  #         cd homebrew-sh-aid
  #         git config user.name "GitHub Action"
  #         git config user.email "action@github.com"
  #         git add Formula/sh-aid.rb
  #         git commit -m "Update formula to v${{ steps.version.outputs.VERSION }}"
  #         git push
